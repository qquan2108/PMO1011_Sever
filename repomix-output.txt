This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.gitattributes
.gitignore
app.js
bin/www
filesever.txt
model/bookingModel.js
model/paymentModel.js
model/promotionModel.js
model/reportModel.js
model/roomModel.js
model/serviceModel.js
model/staffModel.js
model/userModel.js
package.json
public/stylesheets/style.css
routes/bookingRoutes.js
routes/index.js
routes/promotionRoutes.js
routes/reportRoutes.js
routes/roomRoutes.js
routes/serviceRoutes.js
routes/staffRoutes.js
routes/userRoutes.js
services/authService.js
services/bookingService.js
services/promotionService.js
services/reportService.js
services/roomService.js
services/serviceService.js
views/error.hbs
views/index.hbs
views/layout.hbs

================================================================
Files
================================================================

================
File: .gitattributes
================
# Auto detect text files and perform LF normalization
* text=auto

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp
.cache

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

================
File: app.js
================
var createError = require('http-errors');
var express = require('express');
var path = require('path');
var cookieParser = require('cookie-parser');
var logger = require('morgan');
var mongoose = require("mongoose");

const userRoutes = require('./routes/userRoutes');
const staffRoutes = require('./routes/staffRoutes');
const roomRoutes = require('./routes/roomRoutes');
const bookingRoutes = require('./routes/bookingRoutes');
const serviceRoutes = require('./routes/serviceRoutes');
const promotionRoutes = require('./routes/promotionRoutes');
const reportRoutes = require('./routes/reportRoutes');

var app = express();

// view engine setup
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'hbs');

mongoose.connect('mongodb+srv://quantvqps39683:quocquan.2108@hotelmanager.p49jb.mongodb.net/?retryWrites=true&w=majority&appName=HotelManager/test')
  .then(() => console.log('>>>>>>>>>> DB Connected!!!!!!'))
  .catch(err => console.log('>>>>>>>>> DB Error: ', err));
  
app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));

app.use('/users', userRoutes);
app.use('/staffs', staffRoutes);
app.use('/rooms', roomRoutes);
app.use('/bookings', bookingRoutes);
app.use('/services', serviceRoutes);
app.use('/promotions', promotionRoutes);
app.use('/reports', reportRoutes);

// catch 404 and forward to error handler
app.use(function(req, res, next) {
  next(createError(404));
});

// error handler
app.use(function(err, req, res, next) {
  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = req.app.get('env') === 'development' ? err : {};

  // render the error page
  res.status(err.status || 500);
  res.render('error');
});

module.exports = app;

================
File: bin/www
================
#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('sever:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '2108');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

================
File: filesever.txt
================
Model
1/		models/userModel.js Model người dùng
const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
  name: { type: String, required: true },
  email: { type: String, unique: true, required: true },
  password: { type: String, required: true },
  phone: { type: String },
  address: { type: String },
  role: { type: String, enum: ['user', 'staff', 'admin'], default: 'user' }
});

module.exports = mongoose.model('User', userSchema);

2/     	models/roomModel.js Model phòng

const mongoose = require('mongoose');

const roomSchema = new mongoose.Schema({
  roomNumber: { type: String, unique: true, required: true },
  type: { type: String, required: true },
  price: { type: Number, required: true },
  status: { type: String, enum: ['available', 'booked', 'cleaning'], default: 'available' }
});

module.exports = mongoose.model('Room', roomSchema);


models/serviceModel.js

const mongoose = require('mongoose');

const serviceSchema = new mongoose.Schema({
  name: { type: String, required: true },
  description: { type: String },
  price: { type: Number, required: true }
});

module.exports = mongoose.model('Service', serviceSchema);


3/ 		models/bookingModel.js  Model dịch vụ
const mongoose = require('mongoose');

const bookingSchema = new mongoose.Schema({
  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  roomId: { type: mongoose.Schema.Types.ObjectId, ref: 'Room', required: true },
  checkIn: { type: Date, required: true },
  checkOut: { type: Date, required: true },
  status: { type: String, enum: ['pending', 'confirmed', 'canceled'], default: 'pending' }
});

module.exports = mongoose.model('Booking', bookingSchema);

4/ models/bookingModel.js - Model đặt phòng
const mongoose = require('mongoose');

const bookingSchema = new mongoose.Schema({
  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  roomId: { type: mongoose.Schema.Types.ObjectId, ref: 'Room', required: true },
  checkIn: { type: Date, required: true },
  checkOut: { type: Date, required: true },
  status: { type: String, enum: ['pending', 'confirmed', 'canceled'], default: 'pending' }
});

module.exports = mongoose.model('Booking', bookingSchema);

5/ models/paymentModel.js - Model thanh toán


const mongoose = require('mongoose');

const paymentSchema = new mongoose.Schema({
  bookingId: { type: mongoose.Schema.Types.ObjectId, ref: 'Booking', required: true },
  amount: { type: Number, required: true },
  paymentMethod: { type: String, enum: ['credit card', 'paypal', 'cash'], required: true },
  status: { type: String, enum: ['pending', 'paid', 'failed'], default: 'pending' }
});

module.exports = mongoose.model('Payment', paymentSchema);



6/  models/promotionModel.js - Model chương trình khuyến mãi

const mongoose = require('mongoose');

const promotionSchema = new mongoose.Schema({
  code: { type: String, unique: true, required: true },
  description: { type: String },
  discount: { type: Number, required: true },  // % giảm giá
  startDate: { type: Date, required: true },
  endDate: { type: Date, required: true }
});

module.exports = mongoose.model('Promotion', promotionSchema);

7/  models/reportModel.js - Model báo cáo doanh thu

const mongoose = require('mongoose');

const reportSchema = new mongoose.Schema({
  date: { type: Date, required: true },
  revenue: { type: Number, required: true },
  roomBookings: { type: Number, required: true },
  servicesUsed: { type: Number, required: true }
});

module.exports = mongoose.model('Report', reportSchema);



Router 
1  routes/userRoutes.js - Người dung
const express = require('express');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const User = require('../models/User');

const router = express.Router();

// [RQ01] Đăng ký người dùng
router.post('/register', async (req, res) => {
    const { name, email, password } = req.body;
    const hashedPassword = await bcrypt.hash(password, 10);
    const user = new User({ name, email, password: hashedPassword });
    await user.save();
    res.json({ message: "Đăng ký thành công!" });
});

// [RQ02] Đăng nhập
router.post('/login', async (req, res) => {
    const { email, password } = req.body;
    const user = await User.findOne({ email });
    if (!user) return res.status(400).json({ message: "Không tìm thấy tài khoản" });

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) return res.status(400).json({ message: "Sai mật khẩu" });

    const token = jwt.sign({ id: user._id, role: user.role }, process.env.JWT_SECRET, { expiresIn: "1h" });
    res.json({ token });
});

// [RQ10] Xem thông tin phòng đã đặt
router.get('/:userId/bookings', async (req, res) => {
    const bookings = await Booking.find({ user: req.params.userId });
    res.json(bookings);
});

module.exports = router;
2  routes/staffRoutes.js - Nhân viên
const express = require('express');
const Staff = require('../models/Staff');
const Service = require('../models/Service');
const User = require('../models/User');

const router = express.Router();

// [RQ20] Quản lý nhân viên
router.post('/add', async (req, res) => {
    const { name, email, position } = req.body;
    const staff = new Staff({ name, email, position });
    await staff.save();
    res.json({ message: "Nhân viên mới đã được thêm!" });
});

// [RQ13] Xem danh sách khách hàng
router.get('/customers', async (req, res) => {
    const customers = await User.find();
    res.json(customers);
});

module.exports = router;
3  routes/roomRoutes.js - Phòng
const express = require('express');
const Room = require('../models/Room');

const router = express.Router();

// [RQ03] Xem thông tin phòng
router.get('/:id', async (req, res) => {
    const room = await Room.findById(req.params.id);
    res.json(room);
});

// [RQ08] Đánh giá phòng
router.post('/:id/review', async (req, res) => {
    const { userId, rating, comment } = req.body;
    await Room.findByIdAndUpdate(req.params.id, { $push: { reviews: { userId, rating, comment } } });
    res.json({ message: "Đánh giá đã được ghi nhận!" });
});

// [RQ22] Cập nhật chính sách giá phòng
router.put('/:id/price', async (req, res) => {
    const { price } = req.body;
    await Room.findByIdAndUpdate(req.params.id, { price });
    res.json({ message: "Giá phòng đã được cập nhật!" });
});

module.exports = router;
4  routes/bookingRoutes.js - Đặt phòng hủy đặt phòng
const express = require('express');
const Booking = require('../models/Booking');

const router = express.Router();

// [RQ04] Đặt phòng
router.post('/book', async (req, res) => {
    const { userId, roomId, startDate, endDate } = req.body;
    const booking = new Booking({ userId, roomId, startDate, endDate });
    await booking.save();
    res.json({ message: "Đặt phòng thành công!" });
});

// [RQ05] Hủy đặt phòng
router.delete('/cancel/:id', async (req, res) => {
    await Booking.findByIdAndDelete(req.params.id);
    res.json({ message: "Hủy đặt phòng thành công!" });
});

module.exports = router;
5  routes/serviceRoutes.js - Dịch vụ
const express = require('express');
const Service = require('../models/Service');

const router = express.Router();

// [RQ11] Quản lý dịch vụ phụ trợ
router.post('/add', async (req, res) => {
    const { name, description, price } = req.body;
    const service = new Service({ name, description, price });
    await service.save();
    res.json({ message: "Dịch vụ mới đã được thêm!" });
});

// [RQ12] Nhận yêu cầu dịch vụ từ khách hàng
router.post('/request', async (req, res) => {
    const { userId, serviceId } = req.body;
    await Service.findByIdAndUpdate(serviceId, { $push: { requests: userId } });
    res.json({ message: "Yêu cầu dịch vụ đã được ghi nhận!" });
});

module.exports = router;
6  routes/promotionRoutes.js - Khuyến mãi
const express = require('express');
const Promotion = require('../models/Promotion');

const router = express.Router();

// [RQ27] Quản lý chương trình khuyến mãi
router.post('/add', async (req, res) => {
    const { name, discount, description } = req.body;
    const promotion = new Promotion({ name, discount, description });
    await promotion.save();
    res.json({ message: "Khuyến mãi đã được thêm!" });
});

// [RQ09] Nhận thông báo khuyến mãi
router.get('/notify/:userId', async (req, res) => {
    const promotions = await Promotion.find();
    res.json(promotions);
});

module.exports = router;
7  routes/reportRoutes.js - Báo cáo & Thống kê


const express = require('express');
const Report = require('../models/Report');

const router = express.Router();

// [RQ21] Xem báo cáo doanh thu
router.get('/revenue', async (req, res) => {
    const reports = await Report.find();
    res.json(reports);
});

// [RQ29] Xem thống kê doanh thu theo dịch vụ
router.get('/services', async (req, res) => {
    const serviceReports = await Report.find({ type: "service" });
    res.json(serviceReports);
});

module.exports = router;

================
File: model/bookingModel.js
================
const mongoose = require('mongoose');

const bookingSchema = new mongoose.Schema({
  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  roomId: { type: mongoose.Schema.Types.ObjectId, ref: 'Room', required: true },
  checkIn: { type: Date, required: true },
  checkOut: { type: Date, required: true },
  status: { type: String, enum: ['pending', 'confirmed', 'canceled'], default: 'pending' }
});

module.exports = mongoose.model('Booking', bookingSchema);

================
File: model/paymentModel.js
================
const mongoose = require('mongoose');

const paymentSchema = new mongoose.Schema({
  bookingId: { type: mongoose.Schema.Types.ObjectId, ref: 'Booking', required: true },
  amount: { type: Number, required: true },
  paymentMethod: { type: String, enum: ['credit card', 'paypal', 'cash'], required: true },
  status: { type: String, enum: ['pending', 'paid', 'failed'], default: 'pending' }
});

module.exports = mongoose.model('Payment', paymentSchema);

================
File: model/promotionModel.js
================
const mongoose = require('mongoose');

const promotionSchema = new mongoose.Schema({
  code: { type: String, unique: true, required: true },
  description: { type: String },
  discount: { type: Number, required: true },  // % giảm giá
  startDate: { type: Date, required: true },
  endDate: { type: Date, required: true }
});

module.exports = mongoose.model('Promotion', promotionSchema);

================
File: model/reportModel.js
================
const mongoose = require('mongoose');

const reportSchema = new mongoose.Schema({
  date: { type: Date, required: true },
  revenue: { type: Number, required: true },
  roomBookings: { type: Number, required: true },
  servicesUsed: { type: Number, required: true }
});

module.exports = mongoose.model('Report', reportSchema);

================
File: model/roomModel.js
================
const mongoose = require('mongoose');

const roomSchema = new mongoose.Schema({
  roomNumber: { type: String, unique: true, required: true },
  type: { type: String, required: true },
  price: { type: Number, required: true },
  status: { type: String, enum: ['available', 'booked', 'cleaning'], default: 'available' }
});

module.exports = mongoose.model('Room', roomSchema);

================
File: model/serviceModel.js
================
const mongoose = require('mongoose');

const serviceSchema = new mongoose.Schema({
  name: { type: String, required: true },
  description: { type: String },
  price: { type: Number, required: true }
});

module.exports = mongoose.model('Service', serviceSchema);

================
File: model/staffModel.js
================
const mongoose = require('mongoose');

const staffSchema = new mongoose.Schema({
  name: { type: String, required: true },
  email: { type: String, required: true, unique: true },
  position: { type: String, required: true }
});

module.exports = mongoose.model('Staff', staffSchema);

================
File: model/userModel.js
================
const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
  name: { type: String, required: true },
  email: { type: String, unique: true, required: true },
  password: { type: String, required: true },
  phone: { type: String },
  address: { type: String },
  role: { type: String, enum: ['user', 'staff', 'admin'], default: 'user' }
});

module.exports = mongoose.model('User', userSchema);

================
File: package.json
================
{
  "name": "sever",
  "version": "0.0.0",
  "private": true,
  "scripts": {
    "start": "node ./bin/www",
    "dev": "nodemon ./bin/www"
  },
  "dependencies": {
    "bcrypt": "^5.1.1",
    "bcryptjs": "^3.0.0",
    "cookie-parser": "~1.4.4",
    "debug": "~2.6.9",
    "express": "~4.16.1",
    "express-validator": "^7.2.1",
    "hbs": "~4.0.4",
    "http-errors": "~1.6.3",
    "jsonwebtoken": "^9.0.2",
    "mongoose": "^8.10.0",
    "morgan": "~1.9.1",
    "nodemon": "^3.1.9"
  }
}

================
File: public/stylesheets/style.css
================
body {
  padding: 50px;
  font: 14px "Lucida Grande", Helvetica, Arial, sans-serif;
}

a {
  color: #00B7FF;
}

================
File: routes/bookingRoutes.js
================
const express = require('express');
const Booking = require('../model/bookingModel');

const router = express.Router();

// [RQ04] Đặt phòng
router.post('/book', async (req, res) => {
    const { userId, roomId, startDate, endDate } = req.body;
    const booking = new Booking({ userId, roomId, startDate, endDate });
    await booking.save();
    res.json({ message: "Đặt phòng thành công!" });
});

// [RQ05] Hủy đặt phòng
router.delete('/cancel/:id', async (req, res) => {
    await Booking.findByIdAndDelete(req.params.id);
    res.json({ message: "Hủy đặt phòng thành công!" });
});

module.exports = router;

================
File: routes/index.js
================
var express = require('express');
var router = express.Router();

/* GET home page. */
router.get('/', function(req, res, next) {
  res.render('index', { title: 'Express' });
});

module.exports = router;

================
File: routes/promotionRoutes.js
================
const express = require('express');
const Promotion = require('../model/promotionModel');

const router = express.Router();

// [RQ27] Quản lý chương trình khuyến mãi
router.post('/add', async (req, res) => {
    const { name, discount, description } = req.body;
    const promotion = new Promotion({ name, discount, description });
    await promotion.save();
    res.json({ message: "Khuyến mãi đã được thêm!" });
});

// [RQ09] Nhận thông báo khuyến mãi
router.get('/notify/:userId', async (req, res) => {
    const promotions = await Promotion.find();
    res.json(promotions);
});

module.exports = router;

================
File: routes/reportRoutes.js
================
const express = require('express');
const Report = require('../model/reportModel');

const router = express.Router();

// [RQ21] Xem báo cáo doanh thu
router.get('/revenue', async (req, res) => {
    const reports = await Report.find();
    res.json(reports);
});

// [RQ29] Xem thống kê doanh thu theo dịch vụ
router.get('/services', async (req, res) => {
    const serviceReports = await Report.find({ type: "service" });
    res.json(serviceReports);
});

module.exports = router;

================
File: routes/roomRoutes.js
================
const express = require('express');
const Room = require('../model/roomModel');

const router = express.Router();

// [RQ03] Xem thông tin phòng
router.get('/:id', async (req, res) => {
    const room = await Room.findById(req.params.id);
    res.json(room);
});

// [RQ08] Đánh giá phòng
router.post('/:id/review', async (req, res) => {
    const { userId, rating, comment } = req.body;
    await Room.findByIdAndUpdate(req.params.id, { $push: { reviews: { userId, rating, comment } } });
    res.json({ message: "Đánh giá đã được ghi nhận!" });
});

// [RQ22] Cập nhật chính sách giá phòng
router.put('/:id/price', async (req, res) => {
    const { price } = req.body;
    await Room.findByIdAndUpdate(req.params.id, { price });
    res.json({ message: "Giá phòng đã được cập nhật!" });
});

module.exports = router;

================
File: routes/serviceRoutes.js
================
const express = require('express');
const Service = require('../model/serviceModel');

const router = express.Router();

// [RQ11] Quản lý dịch vụ phụ trợ
router.post('/add', async (req, res) => {
    const { name, description, price } = req.body;
    const service = new Service({ name, description, price });
    await service.save();
    res.json({ message: "Dịch vụ mới đã được thêm!" });
});

// [RQ12] Nhận yêu cầu dịch vụ từ khách hàng
router.post('/request', async (req, res) => {
    const { userId, serviceId } = req.body;
    await Service.findByIdAndUpdate(serviceId, { $push: { requests: userId } });
    res.json({ message: "Yêu cầu dịch vụ đã được ghi nhận!" });
});

module.exports = router;

================
File: routes/staffRoutes.js
================
const express = require('express');
const Staff = require('../model/staffModel');
const Service = require('../model/serviceModel');
const User = require('../model/userModel');

const router = express.Router();

// [RQ20] Quản lý nhân viên
router.post('/add', async (req, res) => {
    const { name, email, position } = req.body;
    const staff = new Staff({ name, email, position });
    await staff.save();
    res.json({ message: "Nhân viên mới đã được thêm!" });
});

// [RQ13] Xem danh sách khách hàng
router.get('/customers', async (req, res) => {
    const customers = await User.find();
    res.json(customers);
});

module.exports = router;

================
File: routes/userRoutes.js
================
const express = require('express');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const User = require('../model/userModel');

const router = express.Router();

// [RQ01] Đăng ký người dùng
router.post('/register', async (req, res) => {
    if (!req.body.password) return res.status(400).json({ message: "Mật khẩu không được cung cấp" });

    const { name, email, password } = req.body;
    const hashedPassword = await bcrypt.hash(password, 10);
    const user = new User({ name, email, password: hashedPassword });
    await user.save();
    res.json({ message: "Đăng ký thành công!" });
});

// [RQ02] Đăng nhập
router.post('/login', async (req, res) => {
    const { email, password } = req.body;
    const user = await User.findOne({ email });
    if (!user) return res.status(400).json({ message: "Không tìm thấy tài khoản" });

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) return res.status(400).json({ message: "Sai mật khẩu" });

    const token = jwt.sign({ id: user._id, role: user.role }, process.env.JWT_SECRET, { expiresIn: "1h" });
    res.json({ token });
});

// [RQ10] Xem thông tin phòng đã đặt
router.get('/:userId/bookings', async (req, res) => {
    const bookings = await Booking.find({ user: req.params.userId });
    res.json(bookings);
});

module.exports = router;

================
File: services/authService.js
================
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

async function register(name, email, password) {
  const hashedPassword = await bcrypt.hash(password, 10);
  const user = new User({ name, email, password: hashedPassword });
  await user.save();
  return { message: "Đăng ký thành công!" };
}

async function login(email, password) {
  const user = await User.findOne({ email });
  if (!user) throw new Error("Không tìm thấy tài khoản");
  const isMatch = await bcrypt.compare(password, user.password);
  if (!isMatch) throw new Error("Sai mật khẩu");
  const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: "1h" });
  return { token };
}

module.exports = {
  register,
  login
};

================
File: services/bookingService.js
================
async function bookRoom(userId, roomId, startDate, endDate) {
    const booking = new Booking({ userId, roomId, startDate, endDate });
    await booking.save();
    return "Đặt phòng thành công!";
  }
  
  async function cancelBooking(id) {
    await Booking.findByIdAndDelete(id);
    return "Hủy đặt phòng thành công!";
  }
  
  module.exports = {
    bookRoom,
    cancelBooking
  };

================
File: services/promotionService.js
================
async function addPromotion(name, discount, description) {
    const promotion = new Promotion({ name, discount, description });
    await promotion.save();
    return { message: "Khuyến mãi đã được thêm!" };
  }
  
  module.exports = {
    addPromotion
  };

================
File: services/reportService.js
================
async function getRevenueReports() {
    const reports = await Report.find();
    return reports;
  }
  
  async function getServiceSpecificReports() {
    const serviceReports = await Report.find({ type: "service" });
    return serviceReports;
  }
  
  module.exports = {
    getRevenueReports,
    getServiceSpecificReports
  };

================
File: services/roomService.js
================
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

async function register(name, email, password) {
  const hashedPassword = await bcrypt.hash(password, 10);
  const user = new User({ name, email, password: hashedPassword });
  await user.save();
  return { message: "Đăng ký thành công!" };
}

async function login(email, password) {
  const user = await User.findOne({ email });
  if (!user) throw new Error("Không tìm thấy tài khoản");
  const isMatch = await bcrypt.compare(password, user.password);
  if (!isMatch) throw new Error("Sai mật khẩu");
  const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: "1h" });
  return { token };
}

module.exports = {
  register,
  login
};

================
File: services/serviceService.js
================
async function bookRoom(userId, roomId, startDate, endDate) {
    const booking = new Booking({ userId, roomId, startDate, endDate });
    await booking.save();
    return "Đặt phòng thành công!";
  }
  
  async function cancelBooking(id) {
    await Booking.findByIdAndDelete(id);
    return "Hủy đặt phòng thành công!";
  }
  
  module.exports = {
    bookRoom,
    cancelBooking
  };

================
File: views/error.hbs
================
<h1>{{message}}</h1>
<h2>{{error.status}}</h2>
<pre>{{error.stack}}</pre>

================
File: views/index.hbs
================
<h1>{{title}}</h1>
<p>Welcome to {{title}}</p>

================
File: views/layout.hbs
================
<!DOCTYPE html>
<html>
  <head>
    <title>{{title}}</title>
    <link rel='stylesheet' href='/stylesheets/style.css' />
  </head>
  <body>
    {{{body}}}
  </body>
</html>



================================================================
End of Codebase
================================================================
