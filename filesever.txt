Model
1/		models/userModel.js Model người dùng
const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
  name: { type: String, required: true },
  email: { type: String, unique: true, required: true },
  password: { type: String, required: true },
  phone: { type: String },
  address: { type: String },
  role: { type: String, enum: ['user', 'staff', 'admin'], default: 'user' }
});

module.exports = mongoose.model('User', userSchema);

2/     	models/roomModel.js Model phòng

const mongoose = require('mongoose');

const roomSchema = new mongoose.Schema({
  roomNumber: { type: String, unique: true, required: true },
  type: { type: String, required: true },
  price: { type: Number, required: true },
  status: { type: String, enum: ['available', 'booked', 'cleaning'], default: 'available' }
});

module.exports = mongoose.model('Room', roomSchema);


models/serviceModel.js

const mongoose = require('mongoose');

const serviceSchema = new mongoose.Schema({
  name: { type: String, required: true },
  description: { type: String },
  price: { type: Number, required: true }
});

module.exports = mongoose.model('Service', serviceSchema);


3/ 		models/bookingModel.js  Model dịch vụ
const mongoose = require('mongoose');

const bookingSchema = new mongoose.Schema({
  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  roomId: { type: mongoose.Schema.Types.ObjectId, ref: 'Room', required: true },
  checkIn: { type: Date, required: true },
  checkOut: { type: Date, required: true },
  status: { type: String, enum: ['pending', 'confirmed', 'canceled'], default: 'pending' }
});

module.exports = mongoose.model('Booking', bookingSchema);

4/ models/bookingModel.js - Model đặt phòng
const mongoose = require('mongoose');

const bookingSchema = new mongoose.Schema({
  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  roomId: { type: mongoose.Schema.Types.ObjectId, ref: 'Room', required: true },
  checkIn: { type: Date, required: true },
  checkOut: { type: Date, required: true },
  status: { type: String, enum: ['pending', 'confirmed', 'canceled'], default: 'pending' }
});

module.exports = mongoose.model('Booking', bookingSchema);

5/ models/paymentModel.js - Model thanh toán


const mongoose = require('mongoose');

const paymentSchema = new mongoose.Schema({
  bookingId: { type: mongoose.Schema.Types.ObjectId, ref: 'Booking', required: true },
  amount: { type: Number, required: true },
  paymentMethod: { type: String, enum: ['credit card', 'paypal', 'cash'], required: true },
  status: { type: String, enum: ['pending', 'paid', 'failed'], default: 'pending' }
});

module.exports = mongoose.model('Payment', paymentSchema);



6/  models/promotionModel.js - Model chương trình khuyến mãi

const mongoose = require('mongoose');

const promotionSchema = new mongoose.Schema({
  code: { type: String, unique: true, required: true },
  description: { type: String },
  discount: { type: Number, required: true },  // % giảm giá
  startDate: { type: Date, required: true },
  endDate: { type: Date, required: true }
});

module.exports = mongoose.model('Promotion', promotionSchema);

7/  models/reportModel.js - Model báo cáo doanh thu

const mongoose = require('mongoose');

const reportSchema = new mongoose.Schema({
  date: { type: Date, required: true },
  revenue: { type: Number, required: true },
  roomBookings: { type: Number, required: true },
  servicesUsed: { type: Number, required: true }
});

module.exports = mongoose.model('Report', reportSchema);



Router 
1  routes/userRoutes.js - Người dung
const express = require('express');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const User = require('../models/User');

const router = express.Router();

// [RQ01] Đăng ký người dùng
router.post('/register', async (req, res) => {
    const { name, email, password } = req.body;
    const hashedPassword = await bcrypt.hash(password, 10);
    const user = new User({ name, email, password: hashedPassword });
    await user.save();
    res.json({ message: "Đăng ký thành công!" });
});

// [RQ02] Đăng nhập
router.post('/login', async (req, res) => {
    const { email, password } = req.body;
    const user = await User.findOne({ email });
    if (!user) return res.status(400).json({ message: "Không tìm thấy tài khoản" });

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) return res.status(400).json({ message: "Sai mật khẩu" });

    const token = jwt.sign({ id: user._id, role: user.role }, process.env.JWT_SECRET, { expiresIn: "1h" });
    res.json({ token });
});

// [RQ10] Xem thông tin phòng đã đặt
router.get('/:userId/bookings', async (req, res) => {
    const bookings = await Booking.find({ user: req.params.userId });
    res.json(bookings);
});

module.exports = router;
2  routes/staffRoutes.js - Nhân viên
const express = require('express');
const Staff = require('../models/Staff');
const Service = require('../models/Service');
const User = require('../models/User');

const router = express.Router();

// [RQ20] Quản lý nhân viên
router.post('/add', async (req, res) => {
    const { name, email, position } = req.body;
    const staff = new Staff({ name, email, position });
    await staff.save();
    res.json({ message: "Nhân viên mới đã được thêm!" });
});

// [RQ13] Xem danh sách khách hàng
router.get('/customers', async (req, res) => {
    const customers = await User.find();
    res.json(customers);
});

module.exports = router;
3  routes/roomRoutes.js - Phòng
const express = require('express');
const Room = require('../models/Room');

const router = express.Router();

// [RQ03] Xem thông tin phòng
router.get('/:id', async (req, res) => {
    const room = await Room.findById(req.params.id);
    res.json(room);
});

// [RQ08] Đánh giá phòng
router.post('/:id/review', async (req, res) => {
    const { userId, rating, comment } = req.body;
    await Room.findByIdAndUpdate(req.params.id, { $push: { reviews: { userId, rating, comment } } });
    res.json({ message: "Đánh giá đã được ghi nhận!" });
});

// [RQ22] Cập nhật chính sách giá phòng
router.put('/:id/price', async (req, res) => {
    const { price } = req.body;
    await Room.findByIdAndUpdate(req.params.id, { price });
    res.json({ message: "Giá phòng đã được cập nhật!" });
});

module.exports = router;
4  routes/bookingRoutes.js - Đặt phòng hủy đặt phòng
const express = require('express');
const Booking = require('../models/Booking');

const router = express.Router();

// [RQ04] Đặt phòng
router.post('/book', async (req, res) => {
    const { userId, roomId, startDate, endDate } = req.body;
    const booking = new Booking({ userId, roomId, startDate, endDate });
    await booking.save();
    res.json({ message: "Đặt phòng thành công!" });
});

// [RQ05] Hủy đặt phòng
router.delete('/cancel/:id', async (req, res) => {
    await Booking.findByIdAndDelete(req.params.id);
    res.json({ message: "Hủy đặt phòng thành công!" });
});

module.exports = router;
5  routes/serviceRoutes.js - Dịch vụ
const express = require('express');
const Service = require('../models/Service');

const router = express.Router();

// [RQ11] Quản lý dịch vụ phụ trợ
router.post('/add', async (req, res) => {
    const { name, description, price } = req.body;
    const service = new Service({ name, description, price });
    await service.save();
    res.json({ message: "Dịch vụ mới đã được thêm!" });
});

// [RQ12] Nhận yêu cầu dịch vụ từ khách hàng
router.post('/request', async (req, res) => {
    const { userId, serviceId } = req.body;
    await Service.findByIdAndUpdate(serviceId, { $push: { requests: userId } });
    res.json({ message: "Yêu cầu dịch vụ đã được ghi nhận!" });
});

module.exports = router;
6  routes/promotionRoutes.js - Khuyến mãi
const express = require('express');
const Promotion = require('../models/Promotion');

const router = express.Router();

// [RQ27] Quản lý chương trình khuyến mãi
router.post('/add', async (req, res) => {
    const { name, discount, description } = req.body;
    const promotion = new Promotion({ name, discount, description });
    await promotion.save();
    res.json({ message: "Khuyến mãi đã được thêm!" });
});

// [RQ09] Nhận thông báo khuyến mãi
router.get('/notify/:userId', async (req, res) => {
    const promotions = await Promotion.find();
    res.json(promotions);
});

module.exports = router;
7  routes/reportRoutes.js - Báo cáo & Thống kê


const express = require('express');
const Report = require('../models/Report');

const router = express.Router();

// [RQ21] Xem báo cáo doanh thu
router.get('/revenue', async (req, res) => {
    const reports = await Report.find();
    res.json(reports);
});

// [RQ29] Xem thống kê doanh thu theo dịch vụ
router.get('/services', async (req, res) => {
    const serviceReports = await Report.find({ type: "service" });
    res.json(serviceReports);
});

module.exports = router;
